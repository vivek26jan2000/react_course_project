{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\online courses\\\\React js practicals\\\\Next.js\\\\pages\\\\index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n};\n\nexport default HomePage;\nexport async function getStaticProps(context) {\n  const mongoose = require(\"mongoose\");\n\n  mongoose.connect(\"mongodb+srv://vivek:Vivek%4026jan2000@cluster0.aqinzv6.mongodb.net/test\").then(() => {\n    console.log(\"db is connect\");\n  });\n  const meetupSchema = new mongoose.Schema({\n    title: {\n      type: String\n    },\n    description: {\n      type: String\n    },\n    address: {\n      type: String\n    },\n    image: {\n      type: String\n    }\n  });\n  let Meetup;\n\n  try {\n    Meetup = mongoose.model(\"Meetup\");\n  } catch (error) {\n    Meetup = mongoose.model(\"Meetup\", meetupSchema);\n  }\n\n  const allMeetups = await Meetup.find();\n  return {\n    props: {\n      meetups: allMeetups.map(meetup => ({\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description,\n        image: meetup.image\n      }))\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/online courses/React js practicals/Next.js/pages/index.js"],"names":["MeetupList","HomePage","props","meetups","getStaticProps","context","mongoose","require","connect","then","console","log","meetupSchema","Schema","title","type","String","description","address","image","Meetup","model","error","allMeetups","find","map","meetup","id","_id","toString"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;AAGA,eAAeF,QAAf;AAEA,OAAO,eAAeG,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEAD,EAAAA,QAAQ,CACLE,OADH,CAEI,yEAFJ,EAIGC,IAJH,CAIQ,MAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GANH;AAQA,QAAMC,YAAY,GAAG,IAAIN,QAAQ,CAACO,MAAb,CAAoB;AACvCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEC;AADD,KADgC;AAIvCC,IAAAA,WAAW,EAAE;AACXF,MAAAA,IAAI,EAAEC;AADK,KAJ0B;AAOvCE,IAAAA,OAAO,EAAE;AACPH,MAAAA,IAAI,EAAEC;AADC,KAP8B;AAUvCG,IAAAA,KAAK,EAAE;AACLJ,MAAAA,IAAI,EAAEC;AADD;AAVgC,GAApB,CAArB;AAeA,MAAII,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAGd,QAAQ,CAACe,KAAT,CAAe,QAAf,CAAT;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdF,IAAAA,MAAM,GAAGd,QAAQ,CAACe,KAAT,CAAe,QAAf,EAAyBT,YAAzB,CAAT;AACD;;AAED,QAAMW,UAAU,GAAG,MAAMH,MAAM,CAACI,IAAP,EAAzB;AAEA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEoB,UAAU,CAACE,GAAX,CAAgBC,MAAD,KAAa;AACnCC,QAAAA,EAAE,EAAED,MAAM,CAACE,GAAP,CAAWC,QAAX,EAD+B;AAEnCf,QAAAA,KAAK,EAAEY,MAAM,CAACZ,KAFqB;AAGnCI,QAAAA,OAAO,EAAEQ,MAAM,CAACR,OAHmB;AAInCD,QAAAA,WAAW,EAAES,MAAM,CAACT,WAJe;AAKnCE,QAAAA,KAAK,EAAEO,MAAM,CAACP;AALqB,OAAb,CAAf;AADJ;AADF,GAAP;AAWD","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\r\n\r\nconst HomePage = (props) => {\r\n  return <MeetupList meetups={props.meetups}></MeetupList>;\r\n};\r\nexport default HomePage;\r\n\r\nexport async function getStaticProps(context) {\r\n  const mongoose = require(\"mongoose\");\r\n\r\n  mongoose\r\n    .connect(\r\n      \"mongodb+srv://vivek:Vivek%4026jan2000@cluster0.aqinzv6.mongodb.net/test\"\r\n    )\r\n    .then(() => {\r\n      console.log(\"db is connect\");\r\n    });\r\n\r\n  const meetupSchema = new mongoose.Schema({\r\n    title: {\r\n      type: String,\r\n    },\r\n    description: {\r\n      type: String,\r\n    },\r\n    address: {\r\n      type: String,\r\n    },\r\n    image: {\r\n      type: String,\r\n    },\r\n  });\r\n\r\n  let Meetup;\r\n\r\n  try {\r\n    Meetup = mongoose.model(\"Meetup\");\r\n  } catch (error) {\r\n    Meetup = mongoose.model(\"Meetup\", meetupSchema);\r\n  }\r\n\r\n  const allMeetups = await Meetup.find();\r\n\r\n  return {\r\n    props: {\r\n      meetups: allMeetups.map((meetup) => ({\r\n        id: meetup._id.toString(),\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        description: meetup.description,\r\n        image: meetup.image,\r\n      })),\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}